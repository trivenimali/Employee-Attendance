//code of signup componenet
<div class="container p-3">
  <div class="offset-3 col-6">
    <div class="card">
      <div class="card-header  font-weight-bold">
        Sign Up Form
      </div>
      <div class="card card-body">
        <form [formGroup]="frmSignup" (submit)="submit()">
          <div class="form-group">
            <label for="email" [ngClass]="frmSignup.controls['email'].invalid ? 'text-danger' : ''">Email Address</label>
            <input id="email" formControlName="email" type="email" class="form-control" [ngClass]="frmSignup.controls['email'].invalid ? 'is-invalid' : ''">
            <label class="text-danger" *ngIf="frmSignup.controls['email'].hasError('required')">
              Email is Required!
            </label>
            <label class="text-danger" *ngIf="frmSignup.controls['email'].hasError('email')">
              Enter a valid email address!
            </label>
          </div>
          <div class="form-group">
            <label for="password" [ngClass]="frmSignup.controls['password'].invalid ? 'text-danger' : ''">Password:</label>
            <input id="password" formControlName="password" type="password" class="form-control" [ngClass]="frmSignup.controls['password'].invalid ? 'is-invalid' : ''">
            <!-- <label class="text-danger col" *ngIf="frmSignup.controls['password'].hasError('required')">
              Password is Required!
            </label> -->
            <label class="col" [ngClass]="frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('minlength')  ? 'text-danger' : 'text-success'">
              <i class="material-icons">{{ frmSignup.controls['password'].hasError('required') ||
                frmSignup.controls['password'].hasError('minlength') ? '' :
                '' }}</i>
              Must be at least 8 characters!
            </label>
            <!-- <label class="col" [ngClass]="frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('hasNumber')  ? 'text-danger' : 'text-success'">
              <i class="material-icons">{{ frmSignup.controls['password'].hasError('required') ||
                frmSignup.controls['password'].hasError('hasNumber') ? 'cancel' :
                'check_circle' }}</i>
              Must contain at least 1 number!
            </label> -->
            <!-- <label class="col" [ngClass]="frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('hasCapitalCase')  ? 'text-danger' : 'text-success'">
              <i class="material-icons">{{ frmSignup.controls['password'].hasError('required') ||
                frmSignup.controls['password'].hasError('hasCapitalCase') ? 'cancel' :
                'check_circle' }}</i>
              Must contain at least 1 in Capital Case!
            </label> -->
          <!--   <label class="col" [ngClass]="frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('hasSmallCase')  ? 'text-danger' : 'text-success'">
              <i class="material-icons">{{ frmSignup.controls['password'].hasError('required') ||
                frmSignup.controls['password'].hasError('hasSmallCase') ? 'cancel' :
                'check_circle' }}</i>
              Must contain at least 1 Letter in Small Case!
            </label> -->
           <!--  <label class="col" [ngClass]="frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('hasSpecialCharacters') ? 'text-danger' : 'text-success'">
              <i class="material-icons">{{ frmSignup.controls['password'].hasError('required') ||
                frmSignup.controls['password'].hasError('hasSpecialCharacters') ? 'cancel' :
                'check_circle' }}</i>
              Must contain at least 1 Special Character!
            </label> -->
          </div>
          <div class="form-group">
            <label for="confirmPassword" [ngClass]="frmSignup.controls['confirmPassword'].invalid ? 'text-danger' : ''">Confirm
              Password:</label>
            <input id="confirmPassword" formControlName="confirmPassword" type="password" class="form-control"
              [ngClass]="frmSignup.controls['confirmPassword'].invalid ? 'is-invalid' : ''">
            <label class="text-danger" *ngIf="frmSignup.controls['confirmPassword'].hasError('required')">
              Password is Required!
            </label>
            <label class="text-danger" *ngIf="frmSignup.controls['confirmPassword'].hasError('NoPassswordMatch')">
              Password do not match
            </label>
          </div>
          <div class="form-group">
            <button [disabled]="frmSignup.invalid" type="submit" class="btn btn-primary btn-block font-weight-bold">Sign
              up</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>




//code of sign up componenet
import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { CustomValidators } from '../../custome-validator';


@Component({
  selector: 'app-sign-up',
  templateUrl: './sign-up.component.html',
  styleUrls: ['./sign-up.component.css']
})
export class SignUpComponent implements OnInit {
  public frmSignup: FormGroup;

  constructor(private fb: FormBuilder) { 
    this.frmSignup = this.createSignupForm();
  }

  ngOnInit() {
  }

  createSignupForm(): FormGroup {
    return this.fb.group(
      {

        name: [
          null,
          Validators.compose([ Validators.required])
        ],
        email: [
          null,
          Validators.compose([Validators.email, Validators.required])
        ],

        phone: [
          null,
          Validators.compose([ Validators.required])
        ],
        password: [
          null,
          Validators.compose([
            Validators.required,
            // check whether the entered password has a number
            CustomValidators.patternValidator(/\d/, {
              hasNumber: true
            }),
            // check whether the entered password has upper case letter
           /*  CustomValidators.patternValidator(/[A-Z]/, {
              hasCapitalCase: true
            }), */
            // check whether the entered password has a lower case letter
            /* CustomValidators.patternValidator(/[a-z]/, {
              hasSmallCase: true
            }), */
            // check whether the entered password has a special character
            /* CustomValidators.patternValidator(
              /[ !@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/,
              {
                hasSpecialCharacters: true
              }
            ), */
            Validators.minLength(8)
          ])
        ],
        confirmPassword: [null, Validators.compose([Validators.required])]
      },
      {
        // check whether our password and confirm password match
        validator: CustomValidators.passwordMatchValidator
      }
    );
  }

  submit() {
    // do signup or something
    console.log(this.frmSignup.value);
  }

}
